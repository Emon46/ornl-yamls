apiVersion: kubedb.com/v1alpha2
kind: Postgres
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"kubedb.com/v1alpha2","kind":"Postgres","metadata":{"annotations":{},"name":"demo-pg-1","namespace":"demo"},"spec":{"monitor":{"agent":"prometheus.io/operator","prometheus":{"serviceMonitor":{"labels":{"release":"kube-prometheus-stack"}}}},"replicas":3,"standbyMode":"Hot","storage":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"1Gi"}},"storageClassName":"linode-block-storage"},"storageType":"Durable","terminationPolicy":"WipeOut","version":"11.11-pg-0.10.0-raft-old"}}
  creationTimestamp: "2022-04-12T11:38:27Z"
  finalizers:
  - kubedb.com
  generation: 2
  name: demo-pg-1
  namespace: demo
  resourceVersion: "35401"
  uid: 3479d1f6-3a1d-4e1d-a4a3-7847ed38b7eb
spec:
  allowedSchemas:
    namespaces:
      from: Same
  authSecret:
    name: demo-pg-1-auth
  clientAuthMode: md5
  coordinator:
    resources:
      limits:
        memory: 256Mi
      requests:
        cpu: 200m
        memory: 256Mi
  leaderElection:
    electionTick: 10
    heartbeatTick: 1
    maximumLagBeforeFailover: 67108864
    period: 300ms
  monitor:
    agent: prometheus.io/operator
    prometheus:
      exporter:
        port: 56790
        resources: {}
      serviceMonitor:
        labels:
          release: kube-prometheus-stack
  podTemplate:
    controller: {}
    metadata: {}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: demo-pg-1
                  app.kubernetes.io/managed-by: kubedb.com
                  app.kubernetes.io/name: postgreses.kubedb.com
              namespaces:
              - demo
              topologyKey: kubernetes.io/hostname
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: demo-pg-1
                  app.kubernetes.io/managed-by: kubedb.com
                  app.kubernetes.io/name: postgreses.kubedb.com
              namespaces:
              - demo
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 50
      containerSecurityContext:
        capabilities:
          add:
          - IPC_LOCK
          - SYS_RESOURCE
        privileged: false
        runAsGroup: 999
        runAsUser: 999
      resources:
        limits:
          memory: 1Gi
        requests:
          cpu: 500m
          memory: 1Gi
      securityContext:
        fsGroup: 999
        runAsGroup: 999
        runAsUser: 999
      serviceAccountName: demo-pg-1
  replicas: 3
  sslMode: disable
  standbyMode: Hot
  storage:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    storageClassName: linode-block-storage
  storageType: Durable
  terminationPolicy: WipeOut
  version: 11.11-pg-0.10.0-raft-old
status:
  conditions:
  - lastTransitionTime: "2022-04-12T11:38:27Z"
    message: 'The KubeDB operator has started the provisioning of Postgres: demo/demo-pg-1'
    reason: DatabaseProvisioningStartedSuccessfully
    status: "True"
    type: ProvisioningStarted
  - lastTransitionTime: "2022-04-12T11:41:47Z"
    message: 'The PostgreSQL: demo/demo-pg-1 is accepting client requests.'
    observedGeneration: 2
    reason: DatabaseAcceptingConnectionRequest
    status: "True"
    type: AcceptingConnection
  - lastTransitionTime: "2022-04-12T11:42:21Z"
    message: DB is ready because of server getting Online and Running state
    observedGeneration: 2
    reason: ReadinessCheckSucceeded
    status: "True"
    type: Ready
  - lastTransitionTime: "2022-04-12T11:42:21Z"
    message: All replicas are ready and in Running state
    observedGeneration: 2
    reason: AllReplicasReady
    status: "True"
    type: ReplicaReady
  - lastTransitionTime: "2022-04-12T11:42:22Z"
    message: 'The PostgreSQL: demo/demo-pg-1 is successfully provisioned.'
    observedGeneration: 2
    reason: DatabaseSuccessfullyProvisioned
    status: "True"
    type: Provisioned
  observedGeneration: 2
  phase: Ready
